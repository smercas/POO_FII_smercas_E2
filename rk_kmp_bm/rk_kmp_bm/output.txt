Calculating the 'bad char' array (or, simply put, the last appearance of all the characters that're within the alphabet in the pattern).
  A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z
 -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  0
      1
      2
  3
  3   2  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1

Calculating the 'good suffix' array (no idea how to explain this one).
The first step revolves around cases where the good suffix does not appear in the pattern more than once.
In those cases, it's helpful to think there're some imaginary characters at the beginning that would fit the good suffix perfectly.
The way to get the number of imaginary characters needed for a certain position is to subtract the length of the suffix that starts from
						the i-th position from the length of the biggest proper frontier of the pattern. Hopefully this'll still makes sense whenever I come back.

pattern:			   ABBA
good suffix:		   ABBA
good suffix match:	ABBA
				   s----+ | strlen(pattern)(4)
				        + | strlen(pattern)(4) - i(0) (=4)
				       f+ | strlen(pattern)(4) - i(0) - f[strlen(pattern](1) (=3)
				
pattern:			  ABBA
good suffix:		   BBA
good suffix match:	BBA
				   s----+ | strlen(pattern)(4)
				       ++ | strlen(pattern)(4) - i(1) (=3)
				      f+  | strlen(pattern)(4) - i(1) - f[strlen(pattern](1) (=2)
				
pattern:			 ABBA
good suffix:		   BA
good suffix match:	BA
				   s----+ | strlen(pattern)(4)
				      +-+ | strlen(pattern)(4) - i(2) (=2)
				     f+   | strlen(pattern)(4) - i(2) - f[strlen(pattern](1) (=1)
				
  0   1   2   3   4
  A   B   B   A
 -3  -2  -1   0   0

The rest of the values(from 5 to 3) will be calculated using the reverse of the fail function generated by the reverse of the pattern.

  A   B   B   A
 -1   0   0   0   1

the above will turn into:

  A   B   B   A
  1   0   0   0  -1

Now we only need to iterate through the failure array and update the good suffix array.

  0   1   2   3   4
 -3  -2  -1   0   0
              0
                  1
                  2
                  3
 -3  -2  -1   0   3
preprocessing:
bad_char_function =
  A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z
  3   2  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
good_suffix_function =
  A   B   B   A
 -3  -2  -1   0   3

s--------------+ | strlen(text)(14)
           f---+ | strlen(text)(14) - strlen(pattern)(4) (=10)
 ABAABBBABABBAA



current_step: i = 0, k = 0
s+               | i(0)
 +---+           | i(0) + strlen(pattern)(4) (=4)
    ++           | i{0) + strlen(pattern)(4) - 1 (=3)
    f            | i{0) + strlen(pattern)(4) - 1 - k(0) (=3)
 ABAABBBABABBAA
    =
 ABBA
    f            | strlen(pattern)(4) - 1 - k(0) (=3)
    ++           | strlen(pattern)(4) - 1 (=3)
s----+           | strlen(pattern)(4) (=4)


current_step: i = 0, k = 1
s+               | i(0)
 +---+           | i(0) + strlen(pattern)(4) (=4)
    ++           | i{0) + strlen(pattern)(4) - 1 (=3)
   f+            | i{0) + strlen(pattern)(4) - 1 - k(1) (=2)
 ABAABBBABABBAA
   /=
 ABBA
   f+            | strlen(pattern)(4) - 1 - k(1) (=2)
    ++           | strlen(pattern)(4) - 1 (=3)
s----+           | strlen(pattern)(4) (=4)
shiftbc = -1, shiftgs = 3
shifting by using the good suffix rule


current_step: i = 3, k = 0
s---+            | i(3)
    +---+        | i(3) + strlen(pattern)(4) (=7)
       ++        | i{3) + strlen(pattern)(4) - 1 (=6)
       f         | i{3) + strlen(pattern)(4) - 1 - k(0) (=6)
 ABAABBBABABBAA
       /
    ABBA
       f         | strlen(pattern)(4) - 1 - k(0) (=3)
       ++        | strlen(pattern)(4) - 1 (=3)
   s----+        | strlen(pattern)(4) (=4)
shiftbc = 1, shiftgs = 1
shifting by using the good suffix rule


current_step: i = 4, k = 0
s----+           | i(4)
     +---+       | i(4) + strlen(pattern)(4) (=8)
        ++       | i{4) + strlen(pattern)(4) - 1 (=7)
        f        | i{4) + strlen(pattern)(4) - 1 - k(0) (=7)
 ABAABBBABABBAA
        =
     ABBA
        f        | strlen(pattern)(4) - 1 - k(0) (=3)
        ++       | strlen(pattern)(4) - 1 (=3)
    s----+       | strlen(pattern)(4) (=4)


current_step: i = 4, k = 1
s----+           | i(4)
     +---+       | i(4) + strlen(pattern)(4) (=8)
        ++       | i{4) + strlen(pattern)(4) - 1 (=7)
       f+        | i{4) + strlen(pattern)(4) - 1 - k(1) (=6)
 ABAABBBABABBAA
       ==
     ABBA
       f+        | strlen(pattern)(4) - 1 - k(1) (=2)
        ++       | strlen(pattern)(4) - 1 (=3)
    s----+       | strlen(pattern)(4) (=4)


current_step: i = 4, k = 2
s----+           | i(4)
     +---+       | i(4) + strlen(pattern)(4) (=8)
        ++       | i{4) + strlen(pattern)(4) - 1 (=7)
      f-+        | i{4) + strlen(pattern)(4) - 1 - k(2) (=5)
 ABAABBBABABBAA
      ===
     ABBA
      f-+        | strlen(pattern)(4) - 1 - k(2) (=1)
        ++       | strlen(pattern)(4) - 1 (=3)
    s----+       | strlen(pattern)(4) (=4)


current_step: i = 4, k = 3
s----+           | i(4)
     +---+       | i(4) + strlen(pattern)(4) (=8)
        ++       | i{4) + strlen(pattern)(4) - 1 (=7)
     f--+        | i{4) + strlen(pattern)(4) - 1 - k(3) (=4)
 ABAABBBABABBAA
     /===
     ABBA
     f--+        | strlen(pattern)(4) - 1 - k(3) (=0)
        ++       | strlen(pattern)(4) - 1 (=3)
    s----+       | strlen(pattern)(4) (=4)
shiftbc = -2, shiftgs = 3
shifting by using the good suffix rule


current_step: i = 7, k = 0
s-------+        | i(7)
        +---+    | i(7) + strlen(pattern)(4) (=11)
           ++    | i{7) + strlen(pattern)(4) - 1 (=10)
           f     | i{7) + strlen(pattern)(4) - 1 - k(0) (=10)
 ABAABBBABABBAA
           /
        ABBA
           f     | strlen(pattern)(4) - 1 - k(0) (=3)
           ++    | strlen(pattern)(4) - 1 (=3)
       s----+    | strlen(pattern)(4) (=4)
shiftbc = 1, shiftgs = 1
shifting by using the good suffix rule


current_step: i = 8, k = 0
s--------+       | i(8)
         +---+   | i(8) + strlen(pattern)(4) (=12)
            ++   | i{8) + strlen(pattern)(4) - 1 (=11)
            f    | i{8) + strlen(pattern)(4) - 1 - k(0) (=11)
 ABAABBBABABBAA
            /
         ABBA
            f    | strlen(pattern)(4) - 1 - k(0) (=3)
            ++   | strlen(pattern)(4) - 1 (=3)
        s----+   | strlen(pattern)(4) (=4)
shiftbc = 1, shiftgs = 1
shifting by using the good suffix rule


current_step: i = 9, k = 0
s---------+      | i(9)
          +---+  | i(9) + strlen(pattern)(4) (=13)
             ++  | i{9) + strlen(pattern)(4) - 1 (=12)
             f   | i{9) + strlen(pattern)(4) - 1 - k(0) (=12)
 ABAABBBABABBAA
             =
          ABBA
             f   | strlen(pattern)(4) - 1 - k(0) (=3)
             ++  | strlen(pattern)(4) - 1 (=3)
         s----+  | strlen(pattern)(4) (=4)


current_step: i = 9, k = 1
s---------+      | i(9)
          +---+  | i(9) + strlen(pattern)(4) (=13)
             ++  | i{9) + strlen(pattern)(4) - 1 (=12)
            f+   | i{9) + strlen(pattern)(4) - 1 - k(1) (=11)
 ABAABBBABABBAA
            ==
          ABBA
            f+   | strlen(pattern)(4) - 1 - k(1) (=2)
             ++  | strlen(pattern)(4) - 1 (=3)
         s----+  | strlen(pattern)(4) (=4)


current_step: i = 9, k = 2
s---------+      | i(9)
          +---+  | i(9) + strlen(pattern)(4) (=13)
             ++  | i{9) + strlen(pattern)(4) - 1 (=12)
           f-+   | i{9) + strlen(pattern)(4) - 1 - k(2) (=10)
 ABAABBBABABBAA
           ===
          ABBA
           f-+   | strlen(pattern)(4) - 1 - k(2) (=1)
             ++  | strlen(pattern)(4) - 1 (=3)
         s----+  | strlen(pattern)(4) (=4)


current_step: i = 9, k = 3
s---------+      | i(9)
          +---+  | i(9) + strlen(pattern)(4) (=13)
             ++  | i{9) + strlen(pattern)(4) - 1 (=12)
          f--+   | i{9) + strlen(pattern)(4) - 1 - k(3) (=9)
 ABAABBBABABBAA
          ====
          ABBA
          f--+   | strlen(pattern)(4) - 1 - k(3) (=0)
             ++  | strlen(pattern)(4) - 1 (=3)
         s----+  | strlen(pattern)(4) (=4)


current_step: i = 9, k = 4

	match

shiftbc = -3, shiftgs = 3
shifting by using the good suffix rule
